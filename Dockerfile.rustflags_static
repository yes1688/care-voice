# =======================================================
# 使用 RUSTFLAGS 強制靜態鏈接的簡化方法
# =======================================================

# ===============================
# Stage 1: 構建前端 (保持不變)
# ===============================
FROM docker.io/node:20-slim AS frontend-builder

WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci --only=production
COPY frontend/ ./
RUN npm run build

# ===============================
# Stage 2: 強制靜態鏈接的後端構建
# ===============================
FROM docker.io/rust:1.85-slim AS backend-builder

# 安裝 musl 工具鏈
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    clang \
    libclang-dev \
    pkg-config \
    libssl-dev \
    git \
    musl-tools \
    musl-dev \
    && rm -rf /var/lib/apt/lists/*

# 添加 musl 目標
RUN rustup target add x86_64-unknown-linux-musl

WORKDIR /app/backend

# 複製依賴文件
COPY backend/Cargo.toml backend/Cargo.lock ./

# 創建虛擬源文件以快取依賴
RUN mkdir src && echo "fn main() {}" > src/main.rs

# 設置強制靜態鏈接的環境變數
ENV RUSTFLAGS='-C target-feature=+crt-static'

# 構建依賴
RUN cargo build --release --target x86_64-unknown-linux-musl && rm -rf src

# 複製實際源碼並構建
COPY backend/src ./src
RUN cargo build --release --target x86_64-unknown-linux-musl

# ===============================
# Stage 3: Alpine 運行時環境
# ===============================
FROM docker.io/alpine:3.20

# 安裝最小運行時依賴
RUN apk add --no-cache \
    nginx \
    supervisor \
    curl \
    ca-certificates

# 創建用戶和目錄
RUN addgroup -g 1000 app && \
    adduser -u 1000 -G app -s /bin/sh -D app && \
    mkdir -p /app/models /var/log/supervisor /run/nginx

# 複製靜態鏈接的後端二進位文件
COPY --from=backend-builder /app/backend/target/x86_64-unknown-linux-musl/release/care-voice /app/care-voice
RUN chown app:app /app/care-voice && chmod +x /app/care-voice

# 複製模型文件
COPY backend/models/ggml-base.bin /app/models/
RUN chown -R app:app /app/models

# 複製前端文件
COPY --from=frontend-builder /app/frontend/dist /usr/share/nginx/html
RUN chown -R nginx:nginx /usr/share/nginx/html

# 複製配置文件 (需要 Alpine 兼容版本)
COPY unified-nginx.conf /etc/nginx/nginx.conf
COPY supervisord.conf /etc/supervisor/supervisord.conf

# 創建日誌目錄
RUN mkdir -p /var/log/nginx /var/log/supervisor && \
    chown -R nginx:nginx /var/log/nginx

WORKDIR /app
EXPOSE 8000

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 啟動 supervisord
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]