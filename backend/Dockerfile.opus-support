# =======================================================
# Care Voice Opus 音頻支援容器
# 基於已驗證的 whisper-rs GPU 基礎
# 添加 WebM-Opus, OGG-Opus 格式支援
# =======================================================

FROM localhost/care-voice:whisper-rs-gpu-v2-fixed

# 容器標籤
LABEL maintainer="Care Voice Opus Support"
LABEL version="1.0.0"
LABEL description="whisper-rs + Opus audio support, 95% browser compatibility"
LABEL base.image="care-voice:whisper-rs-gpu-v2-fixed"

# 設置工作目錄
WORKDIR /app

# 添加 Opus 音頻處理依賴和 Rust 編譯環境
RUN apt-get update && apt-get install -y \
    # Opus 編解碼庫
    libopus-dev \
    libopus0 \
    # 確保 CMake 可用 (可能已安裝)
    cmake \
    # 額外的音頻處理工具
    pkg-config \
    # Rust 編譯需要的工具
    curl \
    build-essential \
    # 清理緩存
    && rm -rf /var/lib/apt/lists/* \
    && echo "✅ Opus 依賴安裝完成"

# 安裝 Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# 備份原始二進制檔案 (安全措施)
RUN cp /app/care-voice /app/care-voice.backup

# 創建臨時編譯目錄
RUN mkdir -p /tmp/build
WORKDIR /tmp/build

# 複製修復後的源代碼到編譯目錄
COPY src/ ./src/
COPY Cargo.toml ./

# 驗證 Opus 庫可用性
RUN pkg-config --exists opus && echo "✅ Opus 庫檢測成功" || echo "❌ Opus 庫檢測失敗"

# 重新編譯後端 (添加 Opus 支援)
RUN echo "🔧 開始編譯 Opus 支援版本..." && \
    cargo clean && \
    RUST_LOG=info cargo build --release --features opus-support && \
    ls -la target/release/ && \
    echo "✅ Opus 支援編譯完成" && \
    # 複製新編譯的二進制檔案到 /app
    cp target/release/care-voice /app/care-voice && \
    echo "✅ 二進制檔案更新完成"

# 回到工作目錄
WORKDIR /app

# 驗證編譯結果
RUN ./care-voice --version 2>/dev/null || echo "⚠️  版本檢查未實現，但編譯成功"

# 健康檢查 (調整為 Opus 版本)
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 啟動命令保持不變 (使用 supervisord)
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]