# =======================================================
# Care Voice Opus 音頻支援容器 (完整版)
# 基於 whisper-rs GPU 基礎，包含完整 Opus 解碼實現
# =======================================================

FROM localhost/care-voice:whisper-rs-gpu-v2-fixed

# 容器標籤
LABEL maintainer="Care Voice Opus Support (Complete)"
LABEL version="1.0.0-complete"
LABEL description="whisper-rs + Complete Opus decoding, 95% browser compatibility"

# 設置工作目錄
WORKDIR /app

# 添加 Opus 音頻處理依賴 (容器內安裝，不影響母機)
RUN apt-get update && apt-get install -y \
    # Opus 編解碼庫 (完整版本)
    libopus-dev \
    libopus0 \
    # 確保 CMake 可用
    cmake \
    # 音頻處理工具
    pkg-config \
    # 測試工具
    curl \
    # 清理緩存
    && rm -rf /var/lib/apt/lists/* \
    && echo "✅ Opus 完整依賴安裝完成"

# 驗證 Opus 庫可用性
RUN pkg-config --exists opus && echo "✅ Opus 庫檢測成功" || echo "❌ Opus 庫檢測失敗"

# 安裝 Rust (如果不存在)
RUN if ! command -v cargo &> /dev/null; then \
        echo "🦀 安裝 Rust 編譯環境..." && \
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
        echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc; \
    else \
        echo "✅ Rust 已安裝"; \
    fi

# 設置 Rust 環境變數
ENV PATH="/root/.cargo/bin:${PATH}"

# 驗證 Rust 安裝
RUN echo "🔍 驗證 Rust 環境..." && \
    /root/.cargo/bin/cargo --version || echo "⚠️ Cargo 需要設置環境"

# 備份原始代碼
RUN cp -r /app/src /app/src.backup 2>/dev/null || echo "無原始代碼需要備份"

# 複製修復後的源代碼 (包含完整 Opus 解碼實現)
COPY src/ ./src/
COPY Cargo.toml ./

# 重新編譯 (啟用 opus-support feature)
RUN echo "🔧 開始編譯完整 Opus 支援版本..." && \
    export PATH="/root/.cargo/bin:$PATH" && \
    /root/.cargo/bin/cargo clean && \
    RUST_LOG=info /root/.cargo/bin/cargo build --release --features opus-support && \
    ls -la target/release/ && \
    echo "✅ 完整 Opus 支援編譯完成"

# 健康檢查
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 啟動命令保持不變
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]