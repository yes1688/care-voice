# =======================================================
# Care Voice 編譯環境容器 - 先建立完整編譯環境
# 目標: 隔離編譯環境，確保所有依賴都正確安裝
# =======================================================

FROM docker.io/nvidia/cuda:12.9.1-devel-ubuntu24.04

LABEL stage="build-environment"
LABEL version="1.0.0" 
LABEL description="Care Voice CUDA + Rust + CMake 完整編譯環境"

# 安裝完整編譯環境
RUN apt-get update && apt-get install -y \
    # 基本工具
    curl \
    ca-certificates \
    git \
    wget \
    unzip \
    # 編譯工具鏈
    build-essential \
    cmake \
    ninja-build \
    # 配置工具
    pkg-config \
    # whisper-rs bindgen 支援
    libclang-dev \
    clang \
    llvm-dev \
    # 音頻庫
    libopus-dev \
    libopus0 \
    # SSL 支援
    libssl-dev \
    # Python (某些編譯需要)
    python3 \
    python3-pip \
    # 清理緩存
    && rm -rf /var/lib/apt/lists/* \
    && echo "✅ 完整編譯環境安裝完成"

# 安裝 Rust 工具鏈 (最新穩定版)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && echo 'source ~/.cargo/env' >> ~/.bashrc \
    && ~/.cargo/bin/rustup default stable \
    && ~/.cargo/bin/rustup component add rustfmt clippy \
    && ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu \
    && echo "✅ Rust 工具鏈安裝完成"

# 設置 Rust 環境變數
ENV PATH="/root/.cargo/bin:${PATH}"
ENV RUST_VERSION="1.88"

# 配置 CUDA 環境變數
ENV CUDA_ROOT="/usr/local/cuda"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
ENV CUDA_VISIBLE_DEVICES="all"
ENV NVIDIA_VISIBLE_DEVICES="all"
ENV NVIDIA_DRIVER_CAPABILITIES="compute,utility"

# 驗證編譯環境
RUN echo "🔍 驗證完整編譯環境..." && \
    nvcc --version && \
    echo "✅ CUDA 編譯器檢測成功" && \
    rustc --version && \
    echo "✅ Rust 編譯器檢測成功" && \
    cmake --version && \
    echo "✅ CMake 檢測成功" && \
    clang --version && \
    echo "✅ Clang 檢測成功" && \
    pkg-config --exists opus && \
    echo "✅ Opus 庫檢測成功: $(pkg-config --modversion opus)" && \
    echo "🎉 所有編譯工具驗證通過"

WORKDIR /workspace

# 創建編譯腳本
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🚀 開始 Care Voice 編譯..."\n\
echo "📁 工作目錄: $(pwd)"\n\
echo "🦀 Rust 版本: $(rustc --version)"\n\
echo "🔧 CUDA 版本: $(nvcc --version | head -n4 | tail -n1)"\n\
echo ""\n\
\n\
# 編譯 Rust 項目\n\
echo "📦 編譯 Rust 依賴..."\n\
cd /workspace\n\
RUST_LOG=info cargo build --release\n\
\n\
echo "✅ 編譯完成!"\n\
echo "📊 編譯產出:"\n\
ls -la target/release/\n\
' > /usr/local/bin/compile.sh && \
    chmod +x /usr/local/bin/compile.sh

CMD ["/usr/local/bin/compile.sh"]