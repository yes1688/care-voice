# =======================================================
# Care Voice 統一 Multi-Stage 構建
# 階段1: 前端構建 | 階段2: 後端構建 | 階段3: 最終整合
# =======================================================

# =======================================================
# 階段1: 前端構建 (SolidJS + Vite)
# =======================================================
FROM node:20-slim AS frontend-builder

LABEL stage="frontend-build"
LABEL version="1.0.0"
LABEL description="Care Voice frontend build stage - SolidJS + Vite"

WORKDIR /app

# 安裝必要的系統工具
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 優化依賴安裝 (利用 Docker 快取層)
COPY frontend/package.json frontend/package-lock.json ./
RUN npm ci --include=dev && \
    echo "✅ 前端依賴安裝完成"

# 複製源代碼和配置文件
COPY frontend/src/ ./src/
COPY frontend/index.html ./
COPY frontend/vite.config.ts ./
COPY frontend/tsconfig.json ./
COPY frontend/tsconfig.node.json ./

# 執行前端編譯
RUN echo "🔧 開始編譯 SolidJS + Vite 前端..." && \
    npm run build && \
    echo "✅ 前端編譯完成"

# 驗證編譯產出
RUN ls -la dist/ && \
    echo "📊 前端編譯產出大小:" && \
    du -sh dist/ && \
    echo "📁 編譯產出文件列表:" && \
    find dist/ -type f

# =======================================================
# 階段2: 後端構建 (Rust + whisper-rs + CUDA 12.9 + cuDNN + Opus)
# =======================================================
FROM docker.io/nvidia/cuda:12.9.1-devel-ubuntu24.04 AS backend-builder

LABEL stage="backend-build"
LABEL version="2.0.0"
LABEL description="Care Voice backend build stage - Rust + whisper-rs + CUDA 12.8 + cuDNN + Opus"

# 安裝額外系統依賴 (CUDA devel 已包含大部分工具)
RUN apt-get update && apt-get install -y \
    # Rust 工具鏈安裝必需
    curl \
    ca-certificates \
    # 配置工具
    pkg-config \
    # 音頻庫
    libopus-dev \
    libopus0 \
    # SSL 支援
    libssl-dev \
    # whisper-rs bindgen 需要的 clang 支援
    libclang-dev \
    clang \
    # whisper-rs cmake 編譯需要
    cmake \
    build-essential \
    # 清理緩存
    && rm -rf /var/lib/apt/lists/* \
    && echo "✅ CUDA 12.9.1 devel + 完整編譯環境安裝完成"

# 安裝 Rust 工具鏈 (最新穩定版)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && echo 'source ~/.cargo/env' >> ~/.bashrc \
    && ~/.cargo/bin/rustup default stable \
    && ~/.cargo/bin/rustup component add rustfmt clippy \
    && echo "✅ Rust 1.85+ 工具鏈安裝完成"

# 設置 Rust 環境變數
ENV PATH="/root/.cargo/bin:${PATH}"
ENV RUST_VERSION="1.85"

# 配置 CUDA 環境變數 (for whisper-rs CUDA 支援)
ENV CUDA_ROOT="/usr/local/cuda"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
ENV CUDA_VISIBLE_DEVICES="all"
ENV NVIDIA_VISIBLE_DEVICES="all"
ENV NVIDIA_DRIVER_CAPABILITIES="compute,utility"

# 驗證 CUDA 和音頻庫可用性
RUN echo "🔍 驗證 CUDA 12.9.1 devel 環境..." && \
    nvcc --version && \
    echo "✅ CUDA 編譯器檢測成功" && \
    pkg-config --exists opus && \
    echo "✅ Opus 庫檢測成功: $(pkg-config --modversion opus)" && \
    rustc --version && \
    echo "✅ Rust 編譯器檢測成功"

WORKDIR /app

# 優化 Rust 編譯 (依賴快取層)
COPY backend/Cargo.toml backend/Cargo.lock ./

# 創建假的 main.rs 用於編譯依賴
RUN mkdir src && \
    echo "fn main() { println!(\"Dependencies build\"); }" > src/main.rs

# 編譯依賴 (利用快取)
RUN echo "📦 開始編譯 Rust 依賴..." && \
    cargo build --release && \
    echo "✅ 依賴編譯完成" && \
    rm -rf src/

# 複製實際源代碼
COPY backend/src/ ./src/

# 觸碰 main.rs 確保重新編譯應用代碼
RUN touch src/main.rs

# 重新編譯應用代碼 (基礎版本，先確保架構正常)
RUN echo "🦀 開始編譯 Care Voice 後端 (基礎版本)..." && \
    RUST_LOG=info cargo build --release && \
    echo "✅ 後端編譯完成"

# 驗證編譯產出
RUN ls -la target/release/ && \
    echo "📊 後端編譯產出:" && \
    echo "📏 二進制文件大小:" && \
    du -sh target/release/care-voice

# =======================================================
# 階段3: 最終整合 (nginx + CUDA 12.9 + cuDNN + 前端 + 後端 + supervisor)
# =======================================================
FROM docker.io/nvidia/cuda:12.9.1-runtime-ubuntu24.04 AS final

LABEL stage="final-integration"
LABEL version="2.0.0"
LABEL description="Care Voice unified service with CUDA 12.8 + cuDNN + frontend + backend + nginx"
LABEL maintainer="Care Voice Enterprise Team"

# 安裝 nginx, supervisor 和必要的 CUDA 運行時工具
RUN apt-get update && apt-get install -y \
    # Web 服務器
    nginx \
    # 進程管理器
    supervisor \
    # CUDA 運行時依賴
    libcublas12 \
    libcudnn9-cuda-12 \
    # 音頻運行時
    libopus0 \
    # 系統工具
    curl \
    bash \
    tzdata \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && echo "✅ CUDA 運行時 + nginx + 系統工具安裝完成"

# 配置 CUDA 運行時環境變數
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
ENV CUDA_VISIBLE_DEVICES="all"
ENV NVIDIA_VISIBLE_DEVICES="all"
ENV NVIDIA_DRIVER_CAPABILITIES="compute,utility"

# 設定時區
ENV TZ=Asia/Taipei
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 創建必要目錄結構
RUN mkdir -p \
    /var/log/supervisor \
    /app \
    /etc/supervisor/conf.d \
    /var/log/care-voice \
    && echo "✅ 目錄結構創建完成"

# 階段1: 從前端構建階段複製靜態文件
COPY --from=frontend-builder /app/dist/ /usr/share/nginx/html/
RUN echo "✅ 前端靜態文件複製完成" && \
    ls -la /usr/share/nginx/html/

# 階段2: 從後端構建階段複製二進制文件
COPY --from=backend-builder /app/target/release/care-voice /app/
RUN echo "✅ 後端二進制文件複製完成" && \
    chmod +x /app/care-voice && \
    ls -la /app/

# 複製配置文件
COPY nginx-production.conf /etc/nginx/conf.d/default.conf
# 創建 supervisord 配置
RUN echo '[supervisord]' > /etc/supervisor/conf.d/care-voice.conf && \
    echo 'nodaemon=true' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'logfile=/var/log/supervisor/supervisord.log' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'pidfile=/var/run/supervisord.pid' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo '' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo '[program:care-voice]' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'command=/app/care-voice' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'directory=/app' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'stdout_logfile=/var/log/care-voice/care-voice.log' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'stderr_logfile=/var/log/care-voice/care-voice-error.log' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'environment=RUST_LOG=info,MODEL_PATH=/app/models' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo '' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo '[program:nginx]' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'command=/usr/sbin/nginx -g "daemon off;"' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'stdout_logfile=/var/log/supervisor/nginx.log' >> /etc/supervisor/conf.d/care-voice.conf && \
    echo 'stderr_logfile=/var/log/supervisor/nginx-error.log' >> /etc/supervisor/conf.d/care-voice.conf

# 跳過建構時的 nginx 配置驗證（運行時才有 care-voice-backend 主機）
RUN echo "🔧 nginx 配置將在運行時驗證"

# 跳過建構時的 supervisor 配置驗證（運行時才能正確測試）
RUN echo "🔧 supervisor 配置將在運行時驗證"

# 智能模型處理 - 優先使用本地模型
RUN mkdir -p /app/models

# 複製本地模型（如果存在）
COPY models/ /app/models/

# 檢查關鍵模型是否存在，不存在則下載
RUN if [ ! -f /app/models/ggml-large-v3.bin ]; then \
        echo "📥 本地無 large-v3 模型，開始下載..."; \
        curl -L "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-large-v3.bin" \
             -o "/app/models/ggml-large-v3.bin" --connect-timeout 30 --max-time 3600; \
        echo "✅ Large-v3 模型下載完成"; \
    else \
        echo "✅ 使用本地 Large-v3 模型"; \
    fi

# 驗證模型並顯示統計
RUN echo "📊 最終模型檔案:" && \
    ls -lh /app/models/ && \
    echo "📁 模型總大小: $(du -sh /app/models | cut -f1)" && \
    echo "🎯 中文優化功能: 支援正體中文、台語轉錄"

# 創建日誌文件並設定權限
RUN touch /var/log/care-voice/app.log && \
    chmod 666 /var/log/care-voice/app.log && \
    echo "✅ 日誌文件創建完成"

# 設定環境變數
ENV RUST_LOG=info
ENV BACKEND_PORT=8001
ENV NGINX_PORT=8000

# 健康檢查腳本
RUN echo '#!/bin/bash\n\
# 檢查 nginx 是否運行\n\
if ! pgrep nginx > /dev/null; then\n\
    echo "❌ nginx 未運行"\n\
    exit 1\n\
fi\n\
\n\
# 檢查後端服務是否運行\n\
if ! pgrep care-voice > /dev/null; then\n\
    echo "❌ care-voice 後端未運行"\n\
    exit 1\n\
fi\n\
\n\
# 檢查服務是否響應\n\
if ! curl -f http://localhost:8000/health > /dev/null 2>&1; then\n\
    echo "❌ 健康檢查失敗"\n\
    exit 1\n\
fi\n\
\n\
echo "✅ 所有服務正常運行"\n\
exit 0\n\
' > /usr/local/bin/healthcheck.sh && \
    chmod +x /usr/local/bin/healthcheck.sh

# 健康檢查配置
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# 暴露端口
EXPOSE 8000

# 創建啟動腳本
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "🚀 正在啟動 Care Voice 整合服務..."\n\
echo "📊 系統資訊:"\n\
echo "  - 前端文件: $(ls -1 /usr/share/nginx/html/ | wc -l) 個"\n\
echo "  - 後端二進制: $(ls -la /app/care-voice)"\n\
echo "  - nginx 版本: $(nginx -v 2>&1)"\n\
echo "  - 時區: $TZ"\n\
\n\
echo "🔧 檢查配置文件..."\n\
nginx -t || exit 1\n\
\n\
echo "📝 啟動 supervisor..."\n\
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/care-voice.conf\n\
' > /usr/local/bin/start.sh && \
    chmod +x /usr/local/bin/start.sh

# 使用啟動腳本
CMD ["/usr/local/bin/start.sh"]

# 添加版本資訊
RUN echo "care-voice-unified-$(date +%Y%m%d-%H%M%S)" > /app/VERSION && \
    echo "✅ Care Voice 統一容器構建完成"