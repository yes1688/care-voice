# =======================================================
# Care Voice 統一容器 - nginx + whisper-rs + 前端
# 多階段構建：前端 -> 後端 -> 統一運行時
# =======================================================

# ===============================
# Stage 1: 構建前端
# ===============================
FROM docker.io/node:20-slim AS frontend-builder

WORKDIR /app/frontend

# 複製前端依賴文件
COPY frontend/package*.json ./
RUN npm ci --only=production

# 複製前端源碼並構建
COPY frontend/ ./
RUN npm run build

# ===============================
# Stage 2: 構建後端
# ===============================
FROM docker.io/rust:1.85-slim AS backend-builder

# 安裝 whisper-rs 構建依賴
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    clang \
    libclang-dev \
    pkg-config \
    libssl-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app/backend

# 複製 Rust 依賴文件
COPY backend/Cargo.toml ./

# 創建虛擬源文件以快取依賴
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release && rm -rf src

# 複製實際源碼並構建
COPY backend/src ./src
RUN cargo build --release

# ===============================
# Stage 3: 統一運行時環境
# ===============================
FROM docker.io/nginx:1.27-bookworm

# 安裝運行時依賴
RUN apt-get update && apt-get install -y \
    supervisor \
    curl \
    ca-certificates \
    libstdc++6 \
    && rm -rf /var/lib/apt/lists/*

# 創建應用用戶和目錄
RUN useradd -m -s /bin/bash app && \
    mkdir -p /app/models /var/log/supervisor

# 複製後端二進位文件
COPY --from=backend-builder /app/backend/target/release/care-voice /app/care-voice
RUN chown app:app /app/care-voice && chmod +x /app/care-voice

# 複製 Whisper 模型
COPY backend/models/ggml-base.bin /app/models/
RUN chown -R app:app /app/models

# 複製前端構建文件
COPY --from=frontend-builder /app/frontend/dist /usr/share/nginx/html
RUN chown -R nginx:nginx /usr/share/nginx/html

# 複製配置文件
COPY unified-nginx.conf /etc/nginx/nginx.conf
COPY supervisord.conf /etc/supervisor/supervisord.conf

# 創建日誌目錄
RUN mkdir -p /var/log/nginx /var/log/supervisor && \
    chown -R nginx:nginx /var/log/nginx

# 設置工作目錄
WORKDIR /app

# 暴露統一端口
EXPOSE 8000

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 啟動 supervisord (管理 nginx + whisper-rs)
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]