# =======================================================
# Care Voice whisper-rs GPU 容器
# 基於 RTX50 成功架構 + Rust whisper-rs 0.14.3
# 支援 CUDA 12.8 + RTX 50/40/30/20 系列
# =======================================================

# ===============================
# Stage 1: 構建前端
# ===============================
FROM docker.io/node:20-slim AS frontend-builder

WORKDIR /app/frontend

# 複製前端依賴文件
COPY frontend/package*.json ./
RUN npm ci --only=production

# 複製前端源碼並構建
COPY frontend/ ./
RUN npm run build

# ===============================
# Stage 2: 構建 Rust whisper-rs
# ===============================
FROM docker.io/nvidia/cuda:12.9.1-devel-ubuntu24.04 AS rust-builder

# 設置環境變數
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Taipei

# CUDA 環境配置 (基於 RTX50 成功配置)
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# RTX 50 系列完整架構支援 (GTX 10xx 到 RTX 50xx) - CUDA 12.9.1 完整支援 sm_120
ENV TORCH_CUDA_ARCH_LIST="6.0;6.1;7.0;7.5;8.0;8.6;8.9;9.0;12.0"
ENV CUDA_ARCHITECTURES="60;61;70;75;80;86;89;90;120"

# whisper-rs 編譯專用環境變數 (優化配置)
ENV LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu
ENV BINDGEN_EXTRA_CLANG_ARGS="-I/usr/include"
ENV WHISPER_DONT_GENERATE_BINDINGS=1
ENV CMAKE_CUDA_ARCHITECTURES="60;61;70;75;80;86;89;90;120"

# 安裝 Rust 和編譯依賴 (Ubuntu 24.04 compatible)
RUN apt-get update && apt-get install -y \
    # Rust 編譯環境
    curl \
    build-essential \
    # whisper-rs 依賴 (不安裝系統 cmake，稍後安裝新版)
    clang \
    libclang-dev \
    pkg-config \
    # 其他系統依賴
    git \
    ca-certificates \
    wget \
    && rm -rf /var/lib/apt/lists/*

# 安裝 CMake (Ubuntu 24.04 預設版本應該足夠)
RUN apt-get update && apt-get install -y cmake && rm -rf /var/lib/apt/lists/*

# 安裝 Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# 設置工作目錄
WORKDIR /app/backend

# 複製 Rust 專案配置 (使用升級後的 whisper-rs 0.14.3)
COPY backend/Cargo.toml ./

# 預構建依賴 (加速後續構建)
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release && rm -rf src

# 複製 Rust 源碼
COPY backend/src ./src/

# 編譯 whisper-rs 後端 (加入 CUDA 編譯標誌)
RUN CFLAGS="-DGGML_CUDA=ON" \
    LDFLAGS="-lcuda -lcublas" \
    cargo build --release --features gpu

# 驗證編譯結果
RUN ls -la target/release/ && \
    ldd target/release/care-voice && \
    echo "whisper-rs GPU 編譯完成！"

# ===============================
# Stage 3: 運行時環境
# ===============================
FROM docker.io/nvidia/cuda:12.9.1-runtime-ubuntu24.04 AS runtime

# 設置環境變數
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Taipei

# CUDA 運行時環境 (對應 RTX50 配置)
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# RTX 系列完整架構資訊 (用於診斷) - CUDA 12.9.1 完整支援 sm_120
ENV TORCH_CUDA_ARCH_LIST="6.0;6.1;7.0;7.5;8.0;8.6;8.9;9.0;12.0"
ENV CUDA_ARCHITECTURES="60;61;70;75;80;86;89;90;120"

# 容器標籤
LABEL maintainer="Care Voice whisper-rs GPU Accelerated"
LABEL version="2.0.0"
LABEL description="whisper-rs GPU container with CUDA 12.9.1 + Ubuntu 24.04, supporting RTX 50/40/30/20 series"
LABEL gpu.architectures="sm_60,sm_61,sm_70,sm_75,sm_80,sm_86,sm_89,sm_90,sm_120"
LABEL gpu.series="RTX 50 series native support with compute_120, CUDA 12.9.1 optimized"

# 安裝運行時依賴
RUN apt-get update && apt-get install -y \
    # Web 服務
    nginx \
    supervisor \
    # 系統工具
    curl \
    ca-certificates \
    # 音頻處理 (whisper-rs 可能需要)
    ffmpeg \
    # 清理
    && rm -rf /var/lib/apt/lists/*

# 建立用戶和目錄 (容錯方式，適應 Ubuntu 24.04)
RUN (groupadd -g 1000 app 2>/dev/null || groupmod -g 1000 $(getent group 1000 | cut -d: -f1) 2>/dev/null || true) && \
    (useradd -u 1000 -g 1000 -m -s /bin/bash app 2>/dev/null || usermod -u 1000 -g 1000 app 2>/dev/null || true) && \
    mkdir -p /app/models /var/log/supervisor /run/nginx /app/logs

# 複製前端構建結果
COPY --from=frontend-builder /app/frontend/dist /usr/share/nginx/html
RUN chown -R www-data:www-data /usr/share/nginx/html

# 複製 Rust 編譯結果
COPY --from=rust-builder /app/backend/target/release/care-voice /app/care-voice
RUN chmod +x /app/care-voice

# 複製模型文件
COPY backend/models/ggml-base.bin /app/models/

# 複製配置文件
COPY unified-nginx.conf /etc/nginx/nginx.conf

# 建立 supervisord 配置 (將在下一步建立)
COPY supervisord_whisper_rs.conf /etc/supervisor/supervisord.conf

# 建立診斷腳本
COPY gpu_diagnostics_whisper_rs.py /app/gpu_diagnostics.py
RUN chmod +x /app/gpu_diagnostics.py

# 設置權限
RUN mkdir -p /var/log/nginx /var/log/supervisor && \
    chown -R www-data:www-data /var/log/nginx && \
    (chown -R 1000:1000 /app || chown -R root:root /app)

# 工作目錄
WORKDIR /app

# 暴露端口
EXPOSE 8001

# 健康檢查 (調整啟動時間，whisper-rs 啟動較快)
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# 啟動服務
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]